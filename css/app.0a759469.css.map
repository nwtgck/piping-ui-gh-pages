{"version":3,"sources":["webpack:///src/src/App.vue"],"names":[],"mappings":"AAoIA,KAMA,eACA","file":"app.0a759469.css","sourcesContent":["<template>\n  <v-app id=\"app\">\n    <v-app-bar app ref=\"app_bar\">\n      <v-toolbar-title style=\"margin-right: 0.6em;\">\n        <!-- Show version on app title -->\n        <v-tooltip bottom>\n          <template v-slot:activator=\"{ on }\">\n            <span v-on=\"on\">\n              Piping\n              <span class=\"font-weight-light\">UI</span>\n            </span>\n          </template>\n          <span>{{ version }}</span>\n        </v-tooltip>\n      </v-toolbar-title>\n\n      <!-- PWA update button -->\n      <v-btn v-if=\"pwa.updateExists\"\n             @click=\"refreshApp\"\n             depressed color=\"blue\" dark small outlined>\n        <v-icon dark left>{{ icons.mdiCached }}</v-icon>{{ strings['pwa_update'] }}\n      </v-btn>\n      <v-spacer></v-spacer>\n\n      <!-- Menu -->\n      <v-menu :close-on-content-click=\"false\">\n        <template v-slot:activator=\"{ on }\">\n          <v-btn icon v-on=\"on\">\n            <v-icon>{{ icons.mdiDotsVertical }}</v-icon>\n          </v-btn>\n        </template>\n\n        <MenuContent v-model=\"licenseDialog\" />\n      </v-menu>\n    </v-app-bar>\n\n    <!--  Open source licenses -->\n    <v-dialog v-model=\"licenseDialog\" scrollable max-width=\"70%\">\n      <!-- `v-if=\"licenseDialog\"` enables to load <Licenses> asynchronously-->\n      <Licenses v-model=\"licenseDialog\" v-if=\"licenseDialog\"/>\n    </v-dialog>\n\n    <v-main>\n      <PipingUI/>\n    </v-main>\n  </v-app>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\nconst PipingUI = () => import('@/components/PipingUI.vue');\nconst MenuContent = () => import('@/components/MenuContent.vue');\nconst Licenses = () => import(\"@/components/Licenses.vue\");\nimport {makePromise} from \"@/utils\";\nimport {VERSION} from '@/version';\nimport {globalStore} from \"@/vue-global\";\nimport {strings} from \"@/strings\";\nimport {mdiCached, mdiDotsVertical} from \"@mdi/js\";\nimport enableDarkTheme from \"@/enable-dark-theme\";\n\nconst {promise: _appBarPromise, resolve: appBarPromiseResolver} = makePromise<Element>();\nexport const appBarPromise = _appBarPromise;\n\n@Component({\n  components: {\n    PipingUI,\n    MenuContent,\n    Licenses,\n  }\n})\nexport default class App extends Vue {\n  private licenseDialog: boolean = false;\n  private icons = {\n    mdiCached,\n    mdiDotsVertical,\n  };\n\n  pwa: {refreshing: boolean, registration?: ServiceWorkerRegistration, updateExists: boolean} = {\n    refreshing: false,\n    registration: undefined,\n    updateExists: false\n  };\n  private version = VERSION;\n\n  // for language support\n  private get strings() {\n    return strings(globalStore.language);\n  }\n\n  created () {\n    document.addEventListener(\n      'swUpdated', this.showRefreshUI as EventListenerOrEventListenerObject, { once: true }\n    );\n  }\n\n  beforeMount() {\n    // Dark theme setting\n    this.$vuetify.theme.dark = enableDarkTheme();\n  }\n\n  mounted() {\n    // Resolve app bar element\n    appBarPromiseResolver((this.$refs['app_bar'] as Vue).$el);\n  }\n\n  showRefreshUI (e: CustomEvent<ServiceWorkerRegistration>) {\n    this.pwa.registration = e.detail;\n    this.pwa.updateExists = true;\n  }\n\n  // Update PWA app\n  refreshApp () {\n    this.pwa.updateExists = false;\n    if (this.pwa.registration === undefined || !this.pwa.registration.waiting) {\n      return;\n    }\n    this.pwa.registration.waiting.postMessage({\n      type: 'skip-waiting'\n    });\n    navigator.serviceWorker.addEventListener(\n      'controllerchange', () => {\n        if (this.pwa.refreshing) return;\n        this.pwa.refreshing = true;\n        window.location.reload();\n      },\n      {once: true}\n    );\n  }\n}\n</script>\n\n<style>\n#app {\n  /*font-family: 'Avenir', Helvetica, Arial, sans-serif;*/\n  /*-webkit-font-smoothing: antialiased;*/\n  /*-moz-osx-font-smoothing: grayscale;*/\n  /*text-align: center;*/\n  /*color: #2c3e50;*/\n  padding-top: 2em;\n}\n</style>\n"]}